package com.example.interviewprepare.architecture.patterns.decorator

/*
    ▎Плюсы паттерна Декоратор:

    1. Гибкость:
    Позволяет добавлять обязанности объектам по мере необходимости,
    что делает систему более гибкой.

    2. Расширяемость:
    Легко добавлять новые декораторы без изменения существующего кода.

    3. Избегание множества подклассов:
    Вместо создания множества подклассов для разных комбинаций функциональностей можно
    использовать декораторы.

    ▎Минусы паттерна Декоратор:

    1. Сложность:
    Увеличивает количество классов и объектов в системе, что может усложнить понимание кода.

    2. Проблемы с производительностью:
    В некоторых случаях использование множества декораторов может негативно сказаться на производительности.

    3. Трудности с отладкой:
    Отладка может быть сложнее из-за множества слоев оберток.
 */
abstract class CoffeeDecorator(private val decoratedCoffee: Coffee) : Coffee {
    override fun cost(): Double = decoratedCoffee.cost()

    override fun ingredients(): String = decoratedCoffee.ingredients()
}