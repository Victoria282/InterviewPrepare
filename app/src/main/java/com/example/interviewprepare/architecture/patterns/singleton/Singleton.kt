package com.example.interviewprepare.architecture.patterns.singleton

import android.util.Log

/*
    Польза и применение паттерна Singleton

    1. Глобальная точка доступа:
     Singleton предоставляет единую точку доступа к своему экземпляру,
    что упрощает использование и управление состоянием.

    2. Ленивая инициализация:
    В Kotlin объект инициализируется при первом доступе,
    что позволяет избежать ненужной загрузки ресурсов до тех пор, пока они не понадобятся.

    3. Потокобезопасность:
    В Kotlin объектная реализация Singleton автоматически потокобезопасна,
    что делает её удобной для многопоточных приложений.

    ---------------------------------------------------------------------------------------

    Вред паттерна Singleton
    1. Глобальное состояние:
    Синглтон может привести к глобальному состоянию, что затрудняет тестирование и отладку.
    Глобальное состояние может быть изменено из разных частей программы,
    что делает поведение системы менее предсказуемым.

    2. Скрытая зависимость:
    Использование синглтона может скрывать зависимости между классами.
    Это делает код менее понятным и затрудняет его сопровождение.

    3. Проблемы с многопоточностью:
    Если синглтон не реализован должным образом, это может привести к проблемам в
    многопоточной среде. Например, если несколько потоков одновременно попытаются
    создать экземпляр синглтона, это может привести к созданию нескольких экземпляров.

    3. Невозможность наследования:
    Поскольку синглтон обычно реализуется как статический класс или объект,
    он не может быть унаследован. Это ограничивает его расширяемость.
 */
object Singleton {
    var someProperty: String = "Initial Value"

    fun doSomething() {
        Log.e("Interview", "Doing something with ${com.example.interviewprepare.architecture.patterns.singleton.Singleton.someProperty}")
    }
}